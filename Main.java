/*
    –î–∞–Ω–∞ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–∞—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ —Ä–∞–∑–º–µ—Ä–∞ ùëö √ó ùëõ, –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è —Å–ª—É—á–∞–π–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏. –î–∞–Ω–æ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ ùëò ‚â§ ùëõ.
    –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π —Å–¥–≤–∏–≥ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Ç—Ä–∏—Ü—ã –Ω–∞ k –ø–æ–∑–∏—Ü–∏–π ¬´–ø–æ –∑–º–µ–π–∫–µ¬ª, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ª–µ–≤–æ–≥–æ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É–≥–ª–∞
    –∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ —Å—Ç—Ä–æ–∫–∞–º —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ. –ß–∞—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏, ¬´–≤—ã—Ö–æ–¥—è—â–∏—Ö¬ª –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –º–∞—Ç—Ä–∏—Ü—ã –≤–ø—Ä–∞–≤–æ,
    –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É, —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–∏ —Å–¥–≤–∏–≥–∞—é—Ç—Å—è –≤ –≤–µ—Ä—Ö–Ω—é—é —Å—Ç—Ä–æ—á–∫—É
    –ö–æ–Ω–¥–∞–∫–æ–≤ –ê.–ê –ü–ò-2–≠ 14.04.24
 */
import java.util.*;

public class Main {

    private static final Random rand = new Random();

    public static void main(String[] args) {
        int m = 3;
        int n = 3;
        int k = 3;

        int[][] matrix = new int[m][n];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                matrix[i][j] = rand.nextInt(10);
            }
        }
        System.out.println("–ò—Å—Ö–æ–¥–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞:");
        printMatrix(matrix);
        move(matrix, k);
        System.out.println("–ú–∞—Ç—Ä–∏—Ü–∞ –ø–æ—Å–ª–µ —Å–¥–≤–∏–≥–∞:");
        printMatrix(matrix);
    }

    private static void move(int[][] matrix, int k) {
        int m = matrix.length;
        int n = matrix[0].length;
        int[] temp = new int[m * n];
        int index = 0;
        // –ö–æ–ø–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Ç—Ä–∏—Ü—ã –≤ –º–∞—Å—Å–∏–≤
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                temp[index++] = matrix[i][j];
            }
        }
        //–°–¥–≤–∏–≥–∞–µ–º –Ω–∞ –∫ (—Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ–±–æ—Ä–∞)
        k = k % (m * n);
        int[] shifted = new int[m * n];
        for (int i = 0; i < m * n; i++) {
            shifted[(i + k) % (m * n)] = temp[i];
        }
        // –ö–æ–ø–∏—Ä—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–∞—Ç—Ä–∏—Ü—É
        index = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                matrix[i][j] = shifted[index++];
            }
        }
    }

    private static void printMatrix(int[][] matrix) {
        for (int[] row : matrix) {
            for (int element : row) {
                System.out.printf("%5d ", element);
            }
            System.out.println();
        }
        System.out.println();
    }
}